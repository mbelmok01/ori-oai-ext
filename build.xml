<project name="ori-oai-ext" default="install-maven" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <description>To initialize, build and then deploy ori-oai-ext.</description>

    <!-- ==================== Include properties =================================== -->
    <property file="build.properties" />
    <property file="init-build.properties" />
    <!-- ==================== Project global properties =================================== -->
    <property name="utils.dir" value="${basedir}/utils" />
	<property name="embedded-libs.dir" value="${utils.dir}/embedded-libs" />
    <property name="war.build.dir" value="${basedir}/ori-oai-ext-webapp/target"/>
    <property name="war.file" value="${war.build.dir}/${app.name.deploy}.war"/>
    <condition property="osfamily-unix">
	<os family="unix" />
    </condition>
    <condition property="osfamily-windows">
	<os family="windows" />
    </condition>
    <!-- ==================== Antlib tasks =================================== -->
    <taskdef 
	resource="net/sf/antcontrib/antlib.xml" 
	classpath="${utils.dir}/lib/ant-contrib-1.0.jar"/>
    <!-- ==================== maven installation properties =================================== -->
    <property name="maven.url" value="http://www.apache.org/dist/maven/binaries" />
    <property name="maven.version" value="3.0.3" />
    <property name="maven.zipfile" value="apache-maven-${maven.version}-bin.zip" />
	<property name="maven.dir" value="${utils.dir}/apache-maven-${maven.version}" />
	<property name="maven.args" value="-DskipTests=true" />
	<property name="maven.bin" value="${maven.dir}/bin" />
    <property name="mvn.opts" value="" />
	<path id="maven-ant-tasks.classpath" path="${utils.dir}/lib/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
	         uri="antlib:org.apache.maven.artifact.ant"
	         classpathref="maven-ant-tasks.classpath" />
	
	
	<path id="ext.temp.classpath">
			<pathelement path="${basedir}/ori-oai-ext-webapp/target/ori-oai-ext/WEB-INF/classes" />
			<fileset dir="${basedir}/ori-oai-ext-webapp/target/ori-oai-ext/WEB-INF/lib" includes="**/*.jar" />
		</path>
	
    <!-- ==================== download-maven Target =================================== -->
    <!-- DEPRECATED : we ship a version of maven within ori-oai-ext -->
    <!-- <target name="download-maven"> -->
    <!-- 	<echo message="${maven.bin} not found, let's download maven..."/> -->
    <!-- 	<mkdir dir="${utils.dir}"/> -->
    <!-- 	<get src="${maven.url}/${maven.zipfile}" dest="${utils.dir}/${maven.zipfile}"/> -->
    <!-- 	<unzip src="${utils.dir}/${maven.zipfile}" dest="${utils.dir}"/> -->
    <!-- 	<delete file="${utils.dir}/${maven.zipfile}"/> -->
    <!-- 	<echo message="maven.bin=${maven.bin}"/> -->
    <!-- </target> -->
    <!-- ==================== prepare-maven Target =================================== -->
    <target name="prepare-maven">
	<if>
	    <available property="maven.dir.available" file="${maven.bin}" type="dir"/>
	    <then>
		<echo message="OK, Maven is already here : maven.bin=${maven.bin}"/>
		<chmod dir="${maven.bin}" perm="755" includes="**/mvn*"/>
	    </then>
	    <else>
		<echo message="Has maven installation been erased ?" />
		<!-- DEPRECATED -->
		<!-- <antcall target="download-maven" /> -->
		<!-- <chmod dir="${maven.bin}" perm="755" includes="**/mvn*"/> -->
	    </else>
	</if>
    </target>
    <!-- ==================== install-maven Target =================================== -->
    <target name="install-unix" if="osfamily-unix">
	<!-- Hack for ori-oai-ext-hal (axis 1) : DEPRECATED -->
        <!-- <copy tofile="NStoPkg.properties" file="ori-oai-ext-hal/NStoPkg.properties" -->
	<!-- 	 overwrite="true" outputencoding="ISO-8859-1" /> -->
	<echo message="execute ${maven.bin}/mvn"/>
        <exec executable="${maven.bin}/mvn" failonerror="true">
            <arg line="-Dmaven.test.skip=true -Dmaven.compiler.debug=false install" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
	<!-- Hack for ori-oai-ext-hal (axis 1) : DEPRECATED -->
        <!-- <copy tofile="NStoPkg.properties" file="ori-oai-ext-hal/NStoPkg.properties" -->
	<!-- 	 overwrite="true" outputencoding="ISO-8859-1" /> -->
	<echo message="execute ${maven.bin}/mvn.bat"/>
	<exec executable="${maven.bin}/mvn.bat" failonerror="true">
	    <arg value="-Dmaven.test.skip=true" />
	    <arg value="install" />
        </exec>
    </target>
    <target name="install-maven" depends="prepare-maven,install-unix,install-windows" description="Installs ori-oai-ext modules in maven local repository." />
    <!-- ==================== delete-maven Target =================================== -->
    <!-- DEPRECATED : we ship a version of maven within ori-oai-ext -->    
    <!-- <target name="delete-maven" description="Deletes project's maven installation"> -->
    <!-- 	<delete dir="${utils.dir}/apache-maven-${maven.version}" /> -->
    <!-- </target> -->
    <!-- ==================== test Target =================================== -->
    <target name="test-unix" description="Execute tests through maven"
	    if="osfamily-unix">
	<echo message="Calling ${maven.bin}/mvn test"/>
	<exec executable="${maven.bin}/mvn" failonerror="false">
	    <arg value="test" />
	    <arg value="-Dmaven.compiler.debug=false" />
	</exec>
    </target>
    <target name="test-windows" description="Execute tests through maven"
	    if="osfamily-windows">
	<echo message="Calling ${maven.bin}/mvn.bat test"/>
	<exec executable="${maven.bin}/mvn.bat" failonerror="false">
	    <arg value="test" />
	    <arg value="-Dmaven.compiler.debug=false" />
	</exec>
    </target>
	
	
	

    	

	<!-- Launch dummy tests -->
	<target name="dummy-test" description="Launch dummy tests">
		
        <!-- To get the classes -->
        <artifact:mvn mavenHome="${maven.dir}" fork="true">
            <arg value="clean"/>
            <arg value="compile"/>
        </artifact:mvn>

        <!-- To get the jars -->
        <artifact:mvn mavenHome="${maven.dir}" fork="true">
            <arg value="${maven.args}"/>
            <arg value="-DsanityCheck=false"/>
            <arg value="war:exploded"/>
        </artifact:mvn>
		
		<javac srcdir="${basedir}/ori-oai-ext-webapp/src/test/java" destdir="${basedir}/ori-oai-ext-webapp/target/ori-oai-ext/WEB-INF/classes" debug="true" deprecation="true" optimize="true">
			<classpath refid="ext.temp.classpath" />
	      </javac>
		
        <java fork="false" dir="${basedir}/ori-oai-ext-webapp/target/ori-oai-ext/WEB-INF/classes" classname="org.orioai.ext.DummyTest">
            <classpath refid="ext.temp.classpath" />
        </java>
	</target>
	
	
	
    <!-- ==================== clean Target =================================== -->
    <target name="clean-unix" if="osfamily-unix">
	<echo message="Calling ${maven.bin}/mvn clean"/>
	<exec executable="${maven.bin}/mvn" failonerror="false">
	    <arg value="clean" />
	    <arg value="-Dmaven.test.skip=true" />
	    <arg value="-Dmaven.compiler.debug=false" />
	</exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
	<echo message="Calling ${maven.bin}/mvn.bat clean"/>
	<exec executable="${maven.bin}/mvn.bat" failonerror="false">
	    <arg value="clean" />
	    <arg value="-Dmaven.test.skip=true" />
	    <arg value="-Dmaven.compiler.debug=false" />
	</exec>
    </target>
    <target name="clean" depends="undeploy, clean-unix,clean-windows" description="Cleans ori-oai-ext build through maven" />
    <!-- ==================== deploy/undeploy Targets =================================== -->
    <target name="deploy" description="Deploy the application in the servlet container" depends="install-maven">
	<mkdir dir="${deploy.home}" />
	<copy todir="${deploy.home}" file="${war.file}" 
	      verbose="true" overwrite="true" />
    </target>
    <target name="undeploy" description="Undeploy the application from the servlet container">
        <delete file="${deploy.home}/${app.name.deploy}.war" verbose="true" />
        <delete dir="${deploy.home}/${app.name.deploy}" verbose="true" />
    </target>
    <!-- ==================== update-pom-versions Target =================================== -->
    <target name="update-versions" description="Update maven projects versions in the parent and modules poms">
	<echo message="Calling ${maven.bin}/mvn release:update-versions -DdevelopmentVersion=${orioaiext.version} -DautoVersionSubmodules=true"/>
	<exec executable="${maven.bin}/mvn" failonerror="false">
	    <arg value="release:update-versions" />
	    <arg value="-Dmaven.test.skip=true" />
	    <arg value="-Dmaven.compiler.debug=false" />
	    <arg value="-DautoVersionSubmodules=true" />
	    <arg value="-DdevelopmentVersion=${orioaiext.version}" />
	</exec>
    </target>
    <!-- ==================== all Target =================================== -->
	<target name="install-local-jars" description="Installation de jars non disponibles sur un depot Maven">
		<artifact:mvn pom="${basedir}/pom.xml" mavenHome="${maven.dir}" fork="true">
			<arg value="install:install-file"/>
			
			<arg value="-DgroupId=gouv.education.apogee"/>
			<arg value="-DartifactId=apo-webservicesclient"/>
			<arg value="-Dversion=450lan"/>
			<arg value="-Dpackaging=jar"/>
			<arg value="-Dfile=${embedded-libs.dir}/apo-webservicesclient450lan.jar"/>
		</artifact:mvn>
		
		
		<artifact:mvn pom="${basedir}/pom.xml" mavenHome="${maven.dir}" fork="true">
			<arg value="install:install-file"/>
			
			<arg value="-DgroupId=org.swordapp"/>
			<arg value="-DartifactId=sword2-client"/>
			<arg value="-Dversion=0.9"/>
			<arg value="-Dpackaging=jar"/>
			<arg value="-Dfile=${embedded-libs.dir}/sword2-client-0.9.jar"/>
		</artifact:mvn>
	</target>
		
		
	<target name="all" description="Full clean, undeployment and deployment of the application" depends="clean,undeploy,install-local-jars,deploy" />
    <!-- ==================== upgrade Target =================================== -->
    <target name="upgrade" description="Upgrade the application" depends="update-versions" />


    <!-- ######################## QUICK INSTALL ######################### -->
    
    <property name="commons.parameters.local.file" value="commons-parameters.properties" />
    
    
    <!-- Télécharge le fichier de propriétés -->
    <target name="download-commons.parameters.local.file" if="commons.parameters.central.file.url">
	<echo message="je copie en local ${commons.parameters.central.file.url} ..."/>
	<get dest="${commons.parameters.local.file}" src="${commons.parameters.central.file.url}"/>
    </target>
    
    
    <!-- Teste si le fichier de propriétés local existe -->
    <target name="test-available-commons.parameters.local.file">
	<available file="${commons.parameters.local.file}" property="commons.parameters.local.file.exists"/>
	<echo message="${commons.parameters.local.file} existe ? ${commons.parameters.local.file.exists}"/>
    </target>
    
    
    <!-- Copie build.example.properties en build.properties -->
    <target name="init-build.properties" depends="download-commons.parameters.local.file,test-available-commons.parameters.local.file" if="commons.parameters.local.file.exists">
	<echo message="initialise le fichier build.properties"/>
	
	<delete file="build.properties" />
	<copy file="init-build.properties" tofile="build.properties">
	    <filterchain>
		<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens"/>
	    </filterchain>
	    <filterset
		begintoken="["
		endtoken="]"
		filtersfile="${commons.parameters.local.file}"/>
	</copy>
	
	<echo message="remplacement des paramètres effectué dans build.properties !"/>

    </target>

    
    <!-- Replace the values -->
    <target name="init-build" depends="init-build.properties" description="Initialize build.properties file by setting all the variables.">
	<if>
	    <equals arg1="${from.quick.install}" arg2="true" />
	    <then>
		<echo message="on change la valeur de commons.parameters.central.file.url dans init-build.properties ..." />
		<replace
		    file="init-build.properties"
		    dir="."
		    value="${commons.parameters.central.file.url}">
		    <include name="init-build.properties"/>
		    <include name="build.properties"/>
		    <replacetoken>[COMMONS_PARAMETERS_CENTRAL_FILE_URL]</replacetoken>
		</replace>
		<replace
		    dir="."
		    value="/">
		    <include name="init-build.properties"/>
		    <include name="build.properties"/>
		    <replacetoken>\</replacetoken>
		</replace>
	    </then>
	    <else>
		<echo message="on ne change pas la valeur de commons.parameters.central.file.url dans init-build.properties ..." />
	    </else>
	</if>
    </target>


</project>
